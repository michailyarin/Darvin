1. Архитектура
 1.1  Улучшить уровень связности кода
 1.2  Переименовать переменные - простые, говорящие 
 1.3  Серьезно упростить код, разделить на модули (не в ущерб скорости и простоте)
 1.4  Подключить использование конфига json
 1.5  Аккуратно вытащить классы в отдельную папку, и все перепроверить
  1.5.1  Добавить фишку со __slots__
 1.6  Тесты в отдельную папку
 1.7  Добавить возможность использовать любой код на любом языке в модуле решаемой проблемы
 1.8  Для модуля решаемой проблемы добавить возможность грузиться однократно, если он на Python 
 1.9  Добавить гены и кроссоверы различных типов
 1.10 Упростить всё для восприятия настолько насколько возможно (переписать DOCS простым языком)
 1.11 Поэксперименировать с ускорением
  1.11.1  Реализовать отдельные вещи на cpython/c/c++/bash(он тоже быстрый)
  1.11.2  Управлять уже скомпилированным в cache либо компилировать заранее
  1.11.3  Применять более ускоренные конструкции

2. Тестирование
 2.1  На каждом этапе отвечать на вопрос - быстрее ли исполняется код
 2.2  Быстрее ли данный вариант кода чем обычный перебор (и насколько быстрее)
 2.3  Измерять и фиксировать уровень энтропии на всех этапах работы кода и смотреть влияние на результат (на задачах с точным ответом)
 2.4  Запихнуть папку с тестами подальше чтобы не пугала

3. В отдельной версии
 3.1  Добавить эвристические задачи и вообще любые задачи
 3.2  Добавить возможность подключать все [расширения] указанные в DOCS
 3.3  Добавить возможность подключать расширения, над которыми работали в статьях из DOCS
