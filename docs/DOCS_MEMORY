https://repository.lboro.ac.uk/articles/Improving_genetic_algorithms_efficiency_using_intelligent_fitness_functions/9490574

1. Введение.

Genetic Algorythmes (GA), Генетические алгоритмы - основаны на теории эволюции (evolution) Дарвина.
    Были придуманы в 1950-ых, некоторые ранние работы принадлежат Фразеру и Бремерманну. Позже также работы Холланда часто цитировались в качестве первоисточника Генетических Алгоритмов. GA состоит из популяции (population) индивидуумов (individuals). Каждый индивидуум представляет собой возможный набор параметров (parameters) для алгоритма (algorithm). Каждый индивидуум проходит тест (test) и ему присваивается (assign) уровень приспособленности (fitness), зависящий от того насколько хорошо они решают проблему (solve problem) [в настоящей эволюции проблем может быть более одной, также они могут быть разными для разных индивидуумов]. Уровень приспособленности затем используется, чтобы решить (decide), которых из индивидуумов следует использовать чтобы произвести следующее поколение (next generation). Чем выше уровень приспособленности индивидуума, тем больше вероятность что они произведут следующую популяцию (population).
    Следующее поколение порождается с использованием двух [можно повысить количество] генетических операторов (genetic operators) после выбора родителей (selecting parents). Родители выбираются исходя из их уровня приспособленности. Чем выше уровень приспособленности, тем больше вероятность, что они будут выбраны в качестве родителей. Первый оператор - скрещивание (crossover) [начиналась ли реальная эволюция со скрещивания?], когда два индивидуума меняются частями своих генов. Второй оператор - мутация [надо полагать разная в разных условиях, действительно ли она случайна?], когда части (parts) генов индивидуумов меняются. Комбинация этих операторов с выбором родителей (parent selection), а также функцией приспособленности позволяет GA находить лучшие решения.


2. Нужен для эффективности.
    В GA большая часть времени может тратиться на тестирование приспособленности индивидуумов. Если тестирование приспособленности занимает 1 минуту на выполнение, тогда тестирование приспособленности 6000 индивидуумов займет около 4 дней и 4 часов.
    Один из методов увеличить количество производимых поколений - сокращение размера популяции. Медленные функции приспособленности ассоциированные с небольшими размерами популяции могут привести к проблемам с преждевременной сходимостью и отсутствием разнообразия в популяции.
    Тестирование 6000 индивидуумов не означает проверку 6000 мест в пространстве поиска. Индивидуумы с одинаковым геномом будут продолжать прибывать. Граф, показанный на рисунке 2 показывает, сколько было выполнено тестов на приспособленность (насколько много пространства поиска было исследовано). Граф, показанный на рисунке 2 - результат запуска GA на тестовой проблеме с параметрами, описанными в секции 4.
    Граф на рисунке 2 показывает, что на сложных проблемах GA легко может потратить треть времени на тестирование приспособленности индивидуумов, которые ранее тестировались [составить хэш таблицу с результатами тех, кто уже тестировался]. Это неочевидный результат, учитывая что в примере размер пространства поиска составляет 2 в 40 степени [в качестве начального источника энтропии можно использовать качественные ключи шифрования], так что шанс случайного дублирования индивидуума очень мал. Причина, по которой так много дубликатов во время работы GA это то, что они не всегда создаются случайными [есть ли проблемы с энтропией в реальной эволюции?]. Следующее поколение основывается на предыдущем, которое тоже основано на предыдущем. Именно этот факт направляет поиск по GA, но он также заставляет появляться одних и тех же индивидуумов много раз.
    Граф на рисунке 2 показывает, что если тест на приспособленность занимает 1 минуту на индивидуума - GA потратит около полутора дней. В случае тестирования приспособленности, которое будет использовать передачу данных через сеть, простое тестирование может занять неделю и больше. GA мог бы потратить 38 лет. Чтобы сделать GA более эффективным требуется сократить (reduce) количество повторных тестов на приспособленность.
    Если тестирование приспособленности отнимает много времени, приемлимо использовать приближение (approximation), которое затратит меньше времени на тестирование индивидуума но не даст точных результатов. Исследование приближений было проведено Yaochu Jin. Rasheed, Ni и Vattam использовали приближения чтобы ускорить время выполнения GA. К несчастью, возникли проблемы с тем, что не было известных приближений, которые могли бы быть использованы; передача по сети в реальном мире лишь одна из них.

3. Концепт программируемых функций приспособленности.
    Стандартная функция приспособленности в GA берет индивидуума в виде параметров для алгоритма и оценивает результат. Чем лучше результат, тем лучше приспособленность. У программируемых функций приспособленности есть память; они могут считать приспособленность индивидуумов основываясь на информации, оставшейся от предыдущих оценок. Есть два вида памяти которые могут использовать такие функции:

 - Краткосрочная память (short term memory)
 - Долгосрочная память (long term memory)

    Краткосрочная память очищается в начале каждого нового поколения и может хранить информацию только о текущем поколении. Долгосрочная память не очищается вообще никогда, но она неспособна хранить всю информацию от предыдущих поколений. Функция приспособленности должна решить что хранить а что перезаписать так как её память ограничена.
    Пример использования краткосрочной памяти - проверка, является ли индивидуум копией другого, подсчитанного ранее в текущем поколении. Если да, то возвращается низкий уровень приспособленности, чтобы остановить преждевременное сближение и увеличить разнообразие популяции.
    Пример использования долгосрочной памяти - продолжать хранить копии нескольких лучших индивидуумов с их приспособленностью. Затем в процессе тестов на приспособленность проверяется, не тестировался ли индивидуум раньше, и если тестировался, возвращается уровень приспособленности с предыдущего теста. Это сокращает количество тестов проводимых GA.

4. Тестовая проблема.
    Проблема (problem), которая используется для тестирования программируемых функций приспособленности, труднорешаема для GA. Индивидуумы отображаются в массив ("mapped into and array") i, состоящий из "dim" восьмибитных чисел типа int. Затем массив используется для подсчета расстояния от точки C с координатами ck, используя формулу 1. Результат формулы 1 используется в формуле 2 для подсчёта значения приспособленности индивидуума.

5. Функции приспособленности (Fitness Functions)

5.1 Стандартная (standard) функция приспособленности
    Стандартная функция приспособленности - это обычная функция приспособленности в GA которая считает уровень приспособленности каждого индивидуума в текущем поколении.

5.2 Программируемая функция приспособленности
    Были протестированы 3 программируемые функции приспособленности. Первая обладала кратковременной памятью, и определяла, тестировался ли уже данный индивидуум в этом поколении. Если да, индивидууму присваивалось нулевое значение приспособленности.
    Вторая обладала долговременной памятью и проверяла, имеется ли запись (record) о тесте (testing) такого же индивидуума в предыдущем поколении. Если индивидуум тестировался ранее - использовалось значение уровня приспособленности из памяти. Если записи не было тогда индивидуум тестировался, и если он достаточно хорош, то записывался в долгосрочную память как эталон.
    Финальная программируемая функция приспособленности имеет оба вида памяти (краткосрочную, долгосрочную). При этом краткосрочная память имеет приоритет над долгосрочной [попробовать наоборот?].

6. Результат.
Все стандартные и программируемые функции приспособленности достигли одинакового уровня приспособленности за одно и то же число поколений.
    На графах на рисунках со 2 по 11 чем ближе две линии - тем более эффективен GA. Граф, показанный на рисунке 2 показывает эффективность стандартных функций приспособленности. Граф на рисунке 3 показывает эффективность программируемых функций приспособленности с краткосрочной памятью. Графы на рисунках 4, 6, 8 и 10 показывают эффективность программируемых функций приспособленности с долгосрочной памятью при численности в 100, 500, 1000 и 2000 индивидуумов. Графы показанные на рисунках 5, 7, 9 и 11 показывают эффективность программируемых функций приспособленности с краткосрочной и долгосрочной памятью с размерами в 100, 500, 1000 и 2000 индивидуумов
    Граф на рисунке 2 показывает что приблизительно треть тестов проводимых со стандартной функцией приспособленности уже ранее проводились.
    Граф на рисунке 3 показывает, что функции приспособленности с краткосрочной памятью могут развить больше поколений при том же числе тестов приспособленности чем стандартная функция приспособленности.
    Граф на рисунке 4 показывает что маленькая долгосрочная память позволяет GA эволюционировать больше поколений чем стандартная функция приспособленности за то же самое число тестов на приспособленность.
    Граф на рисунке 5 показывает, что программируемые функции приспособленности с краткосрочной памятью и с небольшой долгосрочной почти такие же как с одной лишь краткосрочной.
    Графы на рисунках 6, 8 и 10 показывают, что если увеличить размер долгосрочной памяти, эффективность GA также возрастёт.
    Графы на рисунках 7, 9 и 11 показывают, что если увеличить размер долгосрочной памяти в программируемой функции приспособленности с долгосрочной и краткосрочной памятью, эффективность GA возрастает лучше чем в программируемой функции приспособленности с одной только долгосрочной памятью.

7. Заключение
При использовании GA с функцией приспособленности, которая тратит большое время, эффективность GA может быть улучшена использованием программируемых функций приспособленности. Использование кратковременной памяти само по себе слабо влияет на эффективность GA. С долговременной памятью эффект возрастает с размером памяти. Если у программируемой функции приспособленности имеется и долговременная и краткосрочная память, эффект больше, чем по отдельности с краткосрочной и долгосрочной памятью.



____________________Основные понятия______________________
gen - ген
genom - геном
genom parts - части генома
generation - поколение
population - популяция
individual - индивидуум
parameters - параметры
algorithm - алгоритм
test - тест
assign - присвоить
fitness - уровень приспособленности
solve problem - решить проблему
decide - решить
decision - решение
genetic operators - генетические операторы
crossover - скрещивание (генетический оператор)
swap - менять, обмен
mutation - мутация (генетический оператор)
select parents, parent seletion - выбор родителей
approximation - приближение
standard fitness function - стандартная функция приспособленности
intelligent - программируемый
problem - проблема
map, mapped - отобразить
short term memory - краткосрочная память
long term memory - долгосрочная память
record - запись
test - тест  
